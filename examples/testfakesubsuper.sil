\begin{document}
\script[src=packages/rules]
\script[src=packages/raiselower]
\font[size=10pt]
\define[command=textsuperscript]{\font[features=+sups]{\process}}
\define[command=textsubscript]{\font[features=+subs]{\process}}
\script{
local hb = require "justenoughharfbuzz"
local pdf = require("justenoughlibtexpdf")
local vstruct = require "vstruct"
local ot = SILE.require("core.opentype-parser")

local function parseOs2(s)
  if s:len() <= 0 then return end
  local fd = vstruct.cursor(s)
  local header = vstruct.read(">version:u2 xAvgCharWidth:i2 usWeightClass:u2 usWidthClass:u2 fsType:i2 ySubscriptXSize:i2 ySubscriptYSize:i2 ySubscriptXOffset:i2 ySubscriptYOffset:i2 ySuperscriptXSize:i2 ySuperscriptYSize:i2 ySuperscriptXOffset:i2 ySuperscriptYOffset:i2, yStrikeoutSize:i2 yStrikeoutPosition:i2", fd)
  return header
end

local oldParseFont = ot.parseFont
ot.parseFont = function(face)
  local font = oldParseFont(face)
  font.os2 = parseOs2(hb.get_table(face.data, face.index, "OS/2"))
  return font
end

local function raiseScaleContent(xSize, ySize, xOffset, yOffset, angle, fontSize, content)
  local hbox = SILE.call("hbox", {}, content)
  table.remove(SILE.typesetter.state.nodes) -- Remove the box from queue
  local xSz = hbox.width * xSize / fontSize
  local ySz = hbox.height * ySize / fontSize

  SILE.call("kern", { width = xOffset })
  SILE.typesetter:pushHbox({
    width = xSz,
    height = 0,
    depth = 0,
    outputYourself = function(self, typesetter, line)
      local X = typesetter.frame.state.cursorX
      local Y = typesetter.frame.state.cursorY

      SILE.outputters.libtexpdf._init()
      pdf.colorpush_gray(0.7)
      SILE.outputter:drawRule(X, Y + yOffset - 1, xSz, 1)
      SILE.outputter:drawRule(X - xSz * 3, Y + yOffset - 0.1, xSz * 3, 0.1)
      SILE.outputter:drawRule(X - ySz * math.sin(math.rad(angle)), Y + yOffset - ySz, xSz, 1)
      SILE.outputter:drawRule(X - ySz * math.sin(math.rad(angle)) - xSz * 3, Y + yOffset - ySz, xSz * 3, 0.1)
      pdf.colorpop()

      local x0 = X:tonumber()
      local y0 = -Y:tonumber() - yOffset
      typesetter.frame.state.cursorY = Y + yOffset
      pdf:gsave()
      pdf.setmatrix(1, 0, 0, 1, x0, y0)
      pdf.setmatrix(xSize / fontSize, 0, 0, ySize / fontSize, 0, 0)
      pdf.setmatrix(1, 0, 0, 1, -x0, -y0)
      hbox.outputYourself(hbox, typesetter, line)
      pdf:grestore()
      typesetter.frame.state.cursorX = X
      typesetter.frame.state.cursorY = Y
      typesetter.frame:advanceWritingDirection(self.width)
    end
  })
end

SILE.registerCommand("fakesuperscript", function (_, content)
  local ot = SILE.require("core.opentype-parser")
  local fontoptions = SILE.font.loadDefaults({})
  local face = SILE.font.cache(fontoptions, SILE.shaper.getFace)
  local font = ot.parseFont(face)
  local upem = font.head.unitsPerEm
  local angle = font.post.italicAngle
  local fontSize = fontoptions.size

  local xSize = font.os2.ySuperscriptXSize / upem * fontSize
  local ySize = font.os2.ySuperscriptYSize / upem * fontSize
  local xOffset = font.os2.ySuperscriptXOffset / upem * fontSize
  local yOffset = font.os2.ySuperscriptYOffset / upem * fontSize

  raiseScaleContent(xSize, ySize, xOffset, -yOffset, angle, fontSize, content)
end, "Faked scaled superscript.")

SILE.registerCommand("fakesubscript", function (_, content)
  local ot = SILE.require("core.opentype-parser")
  local fontoptions = SILE.font.loadDefaults({})
  local face = SILE.font.cache(fontoptions, SILE.shaper.getFace)
  local font = ot.parseFont(face)
  local upem = font.head.unitsPerEm
  local angle = font.post.italicAngle
  local fontSize = fontoptions.size

  local xSize = font.os2.ySubscriptXSize / upem * fontSize
  local ySize = font.os2.ySubscriptYSize / upem * fontSize
  local xOffset = font.os2.ySubscriptXOffset / upem * fontSize
  local yOffset = font.os2.ySubscriptYOffset / upem * fontSize

  raiseScaleContent(xSize, ySize, xOffset, yOffset, angle, fontSize, content)
end, "Fake scaled subscript.")

SILE.registerCommand("tryfont", function (options, content)
  SILE.call("smallskip")
  SILE.typesetter:typeset(options.family.." ")
  if options.style then
    SILE.typesetter:typeset(options.style.." ")
  end
  options.size = 40
  SILE.call("font", options, content)
end)
}

% The test shows Unicode superscript 2 (resp. subscript), +sups font feature (resp. +subs)
% and the boxes computed from OS/2 table metrics
\define[command=test]{{super²\textsuperscript{2}\fakesuperscript{2} sub₂\textsubscript{2}\fakesubscript{2}}}
\define[command=teste]{{superᵉ\textsuperscript{e}\fakesuperscript{e} subₑ\textsubscript{e}\fakesubscript{e}}}


\tryfont[family=Libertinus Serif]{\test}

\tryfont[family=Libertinus Serif]{\teste}

\tryfont[family=Libertinus Serif, style=italic]{\test}

\tryfont[family=Libertinus Sans]{\test}

\tryfont[family=Libertinus Sans, style=italic]{\test}

% Other fonts are even more messy...

\tryfont[family=FreeSerif]{\test}

\tryfont[family=FreeSerif]{\teste}

\tryfont[family=Ubuntu]{\test}

\tryfont[family=Cormorant Infant]{\test}

\tryfont[family=Cormorant Infant, style=italic]{\test}

\end{document}
